                ;	SKELETAL CBIOS FOR FIRST LEVEL OF CP/M 2.0 ALTERATION
                ;
                ; SECTOR SIZE IS 155, THIS INCLUDES A 1 BYTE SYNC CHAR
                ; A 3 BYTE SECTOR HEADER AND A CHECKSUM BYTE
                ; FOR WRITING, WE NEED AN ADDITIONAL 16 ZERO BYTES
                ; FOR THE BOOT TRACKS, WE COULD USE A 150 BYTE PAYLOAD
                ; BUT IT WOULD STILL NEED 4 TRACKS SO INSTEAD WE USE 128 BYTE SECTORS
                
                ;OFFSETS IN CPM.SYS
                ;CCP: 0000H-0800H
                ;BDOS:0800H-1600H	CCP+BDOS 44 SECTORS
                ;BIOS:1600H-1C00H	BIOS	12 SECTORS MAX BUT CODE CURRENTLY ONLY 0X40F = 9 SECTORS
                
                
                
                ;TRACK 0 HAS RESERVED SECTOR FOR ROMLOADER
                ;TRACK 0 SECTORS 0, 3 (AES103 LOGICAL TRACK 0 SECTOR 1) BOOTLOADER
                ;TRACK 0 SECTOR 8 DIRECTORY FOR ROM
                ;TRACK 0, SECTORS 9-15 (7), TRACK 1 SECTORS 0-15 (16), TRACK2 SECTORS 0-15 (16), TRACK 3 SECTORS 0-4:: C
                ;TRACK 3 SECTORS 5-15 BIOS (11 MAX)
                ;TRACK 4 DIRECTORY
                ;AVAILABLE BLOCKS: (30 * 128 * 16) // 1024 = 60 (61440 USED)
                
                
 0020 =         MSIZE	EQU	32	;CP/M VERSION MEMORY SIZE IN KILOBYTES
                ;
                ;	"BIAS" IS ADDRESS OFFSET FROM 3400H FOR MEMORY SYSTEMS
                ;	THAN 16K (REFERRED TO AS "B" THROUGHOUT THE TEXT).
                ;
 3000 =         BIAS	EQU	(MSIZE-20)*1024
 6400 =         CCP	EQU	3400H+BIAS	;BASE OF CCP
 6C06 =         BDOS	EQU	CCP+806H	;BASE OF BDOS
 7A00 =         BIOS	EQU	CCP+1600H	;BASE OF BIOS
 0004 =         CDISK	EQU	0004H	;CURRENT DISK NUMBER 0=A,...,15=P
 0003 =         IOBYTE	EQU	0003H	;INTEL I/O BYTE
                ;
 7A00           	ORG	BIOS	;ORIGIN OF THIS PROGRAM
 0026 =         NSECTS	EQU	38	;WARM START SECTOR COUNT
 0004 =         OFFSET	EQU	4	;NUMBER OF DISK TRACKS USED BY CP/M
                
 0080 =         BUFF	EQU	0080H	;DEFAULT BUFFER ADDRESS
                
 0096 =         PLSIZ	EQU	150	;SECTOR PAYLOAD SIZE
 009B =         SSIZ	EQU	155	;TOTAL SECTOR DATA SIZE
 0080 =         CPMSSIZ	EQU	128	;CP/M SECTOR SIZE
 0010 =         WRPRE	EQU	16	;WRITE PREAMBLE (ZEROES)
                
                ;
                ;IO PORT DEFINITIONS
 0000 =         PRIRQPR	EQU	00H	
 0001 =         PRXOFF	EQU	01H
 0002 =         PRYOFF	EQU	02H
 0003 =         PRXMAX	EQU	03H
 0003 =         PREMAP	EQU	03H
 0004 =         PFLAGS  EQU	04H
 0005 =         PSTAT	EQU	05H
 0006 =         PKEYB	EQU	06H
 0010 =         PSYNWR	EQU	10H
 0011 =         PSYNRD	EQU 	11H
 0014 =         PSTEP 	EQU	14H
 0015 =         PSEC	EQU	15H
 0016 =         PCMD	EQU	16H
 0017 =         PACTIVE	EQU	17H
 0020 =         PWRADD	EQU	20H
 0021 =         PWRCNT	EQU	21H
 0022 =         PRDADD	EQU	22H
 0023 =         PRDCNT	EQU	23H
 0028 =         PRMST	EQU	28H
                
                ;STATUS BITS
 0001 =         RDY1	EQU	01H
 0002 =         RDY2	EQU	02H
 0004 =         WRP1	EQU	04H
 0008 =         WRP2	EQU	08H
 0010 =         TRK0	EQU	10H
 0080 =         ACTIV	EQU	80H
                
                ;COMMAND BITS
 0001 =         HEAD1	EQU	01H
 0002 =         HEAD2	EQU	02H
 0004 =         MTR1	EQU	04H
 0008 =         MTR2	EQU	08H
 0010 =         ACTEN	EQU	10H
 0020 =         DIRUP	EQU	20H
 0040 =         WRTDSK	EQU	40H
 0080 =         SEL2	EQU	80H
                
                ;SYNCBYTE
 00DB =         SYNRD	EQU	0DBH
 0000 =         SYNWR	EQU	00H
                
                ;IO FLAGS
 0000 =         FLVIDENA	EQU	00H
 0001 =         FLTIMENA 	EQU	01H
 0002 =         FLBELL		EQU	02H
 0003 =         FLTICK		EQU	03H
 0004 =         FLFG		EQU	04H
 0005 =         FLPAGING	EQU	05H
 0006 =         FLULINE		EQU	06H
 0007 =         FLHALFT		EQU	07H
 0008 =         FLON		EQU	08H
 0000 =         FLOFF		EQU	00H
                
                ;KEYBOARD BUFFER
 0008 =         KBBUFSIZ	EQU	8
                
                ;IRQ CONTROLLER STATUS REGISTER VALUE TO SET
 0005 =         IRQSTVAL	EQU	5
                
                ;SIZE FOR INTERRUPT STACK
 0008 =         INSTSTKSIZ	EQU	8
                
                
                ;	JUMP VECTOR FOR INDIVIDUAL SUBROUTINES
 7A00 C3907A    	JMP	BOOT		;COLD START
 7A03 C3CB7A    WBOOTE:	JMP	WBOOT		;WARM START
 7A06 C33F7B    	JMP	CONST		;CONSOLE STATUS
 7A09 C34A7B    	JMP	CONIN		;CONSOLE CHARACTER IN
 7A0C C35F7B    	JMP	CONOUT		;CONSOLE CHARACTER OUT
 7A0F C3077C    	JMP	LIST		;LIST CHARACTER OUT
 7A12 C30B7C    	JMP	PUNCH		;PUNCH CHARACTER OUT
 7A15 C30D7C    	JMP	READER		;READER CHARACTER OUT
 7A18 C3127C    	JMP	HOME		;MOVE HEAD TO HOME POSITION
 7A1B C3167C    	JMP	SELDSK		;SELECT DISK
 7A1E C3507C    	JMP	SETTRK		;SET TRACK NUMBER
 7A21 C3587C    	JMP	SETSEC		;SET SECTOR NUMBER
 7A24 C3637C    	JMP	SETDMA		;SET DMA ADDRESS
 7A27 C3697C    	JMP	READ		;READ DISK
 7A2A C3C67C    	JMP	WRITE		;WRITE DISK
 7A2D C3097C    	JMP	LISTST		;RETURN LIST STATUS
 7A30 C35D7C    	JMP	SECTRAN		;SECTOR TRANSLATE
                ;
                	MACLIB	DISKDEF	;LOAD THE DISK DEFINITION LIBRARY
                	DISKS	2	;TWO DISKS
 7A33+=         DPBASE	EQU	$	;BASE OF DISK PARAMETER BLOCKS
 7A33+627A0000  DPE0:	DW	XLT0,0000H	;TRANSLATE TABLE
 7A37+00000000  	DW	0000H,0000H	;SCRATCH AREA
 7A3B+2F7F537A  	DW	DIRBUF,DPB0	;DIR BUFF,PARM BLOCK
 7A3F+B77FAF7F  	DW	CSV0,ALV0	;CHECK, ALLOC VECTORS
 7A43+627A0000  DPE1:	DW	XLT1,0000H	;TRANSLATE TABLE
 7A47+00000000  	DW	0000H,0000H	;SCRATCH AREA
 7A4B+2F7F537A  	DW	DIRBUF,DPB1	;DIR BUFF,PARM BLOCK
 7A4F+CF7FC77F  	DW	CSV1,ALV1	;CHECK, ALLOC VECTORS
                	DISKDEF	0,0,15,3,1024,60,64,64,OFFSET
 7A53+=         DPB0	EQU	$		;DISK PARM BLOCK
 7A53+1000      	DW	16		;SEC PER TRACK
 7A55+03        	DB	3		;BLOCK SHIFT
 7A56+07        	DB	7		;BLOCK MASK
 7A57+00        	DB	0		;EXTNT MASK
 7A58+3B00      	DW	59		;DISK SIZE-1
 7A5A+3F00      	DW	63		;DIRECTORY MAX
 7A5C+C0        	DB	192		;ALLOC0
 7A5D+00        	DB	0		;ALLOC1
 7A5E+1000      	DW	16		;CHECK SIZE
 7A60+0400      	DW	4		;OFFSET
 7A62+=         XLT0	EQU	$		;TRANSLATE TABLE
 7A62+00        	DB	0		
 7A63+03        	DB	3		
 7A64+06        	DB	6		
 7A65+09        	DB	9		
 7A66+0C        	DB	12		
 7A67+0F        	DB	15		
 7A68+02        	DB	2		
 7A69+05        	DB	5		
 7A6A+08        	DB	8		
 7A6B+0B        	DB	11		
 7A6C+0E        	DB	14		
 7A6D+01        	DB	1		
 7A6E+04        	DB	4		
 7A6F+07        	DB	7		
 7A70+0A        	DB	10		
 7A71+0D        	DB	13		
                	DISKDEF	1,0
 7A53+=         DPB1	EQU	DPB0	;EQUIVALENT PARAMETERS
 0008+=         ALS1	EQU	ALS0	;SAME ALLOCATION VECTOR SIZE
 0010+=         CSS1	EQU	CSS0	;SAME CHECKSUM VECTOR SIZE
 7A62+=         XLT1	EQU	XLT0	;SAME TRANSLATE TABLE
                ;	ENDEF OCCURS AT END OF ASSEMBLY
                
                
 000D =         CR	EQU	0DH	;CARRIAGE RETURN
 000A =         LF	EQU	0AH	;LINE FEED
 0008 =         BS	EQU	08H	;BACKSPACE
 007F =         DEL	EQU	7FH	;RUBOUT/DEL
 0016 =         VERS	EQU	22	;VERSION 2.2
                ;
                SIGNON:	;SIGNON MESSAGE: XXK CP/M VERS Y.Y
 7A72 0D0A0A    	DB	CR,LF,LF
 7A75 4145533130	DB	'AES103 '
 7A7C 3332      	DB	'32'	;32K BIOS
 7A7E 6B2043502F	DB	'k CP/M vers '
 7A8A 322E32    	DB	VERS/10+'0','.',VERS MOD 10+'0'
 7A8D 0D0A00    	DB	CR,LF,0
                
                ;	INDIVIDUAL SUBROUTINES TO PERFORM EACH FUNCTION
                BOOT:	;SIMPLEST CASE IS TO JUST PERFORM PARAMETER INITIALIZATION
                	
 7A90 DB03      	IN	PREMAP			;MAP OUT BOOT ROM
 7A92 310001    	LXI	SP,BUFF+80H		;MAKE SURE WE HAVE A STACK
                	
 7A95 AF        	XRA	A			;ZERO IN THE ACCUM
 7A96 320300    	STA	IOBYTE			;CLEAR THE IOBYTE
 7A99 320400    	STA	CDISK			;SELECT DISK ZERO
                	;CLEAR THE DISPLAY
 7A9C 32177F    	STA	SCRX
 7A9F 32187F    	STA	SCRY
 7AA2 D301      	OUT 	PRXOFF
 7AA4 D302      	OUT	PRYOFF
 7AA6 3E07      	MVI	A, 7
 7AA8 D303      	OUT	PRXMAX			;80 CHAR DISPLAY
 7AAA 210080    	LXI     H, 8000H
 7AAD 3E9F      	MVI     A, 9FH           	;END ADDRESS FOR FILL 0X9F00
 7AAF 0620      	MVI	B, 20H
                SCRLOOP:	
 7AB1 70        	MOV     M, B
 7AB2 23        	INX     H
 7AB3 BC        	CMP     H
 7AB4 F2B17A    	JP      SCRLOOP
                
 7AB7 21727A    	LXI	H,SIGNON
 7ABA CDDE7D    	CALL	PRMSG	;PRINT MESSAGE
                
 7ABD 3E08      	MVI     A, FLVIDENA OR FLON	;DISPLAY ON
 7ABF D304      	OUT     PFLAGS
                
 7AC1 CD0D7E    	CALL	KBBUFRES		;RESET KEYBOARD BUFFER
                
 7AC4 3E05      	MVI	A, IRQSTVAL
 7AC6 D300      	OUT	PRIRQPR			;ONLY ALLOW KEYBOARD INTERRUPT
 7AC8 C3147B    	JMP	GOCPM			;INITIALIZE AND GO TO CP/M
                ;
                WBOOT:	;SIMPLEST CASE IS TO READ THE DISK UNTIL ALL SECTORS LOADED
 7ACB 318000    	LXI	SP,80H		;USE SPACE BELOW BUFFER FOR STACK
 7ACE 0E00      	MVI	C,0		;SELECT DISK 0
 7AD0 CD167C    	CALL	SELDSK
 7AD3 CD127C    	CALL	HOME		;GO TO TRACK 00
                ;
 7AD6 0626      	MVI	B,NSECTS	;B COUNTS # OF SECTORS TO LOAD
 7AD8 0E00      	MVI	C,0		;C HAS THE CURRENT TRACK NUMBER
 7ADA 1609      	MVI	D,9		;D HAS THE NEXT SECTOR TO READ
                ;	NOTE THAT WE BEGIN BY READING TRACK 0, SECTOR 9 
                
 7ADC 210064    	LXI	H,CCP		;BASE OF CP/M (INITIAL LOAD POINT)
                LOAD1:	;LOAD ONE MORE SECTOR
 7ADF C5        	PUSH	B	;SAVE SECTOR COUNT, CURRENT TRACK
 7AE0 D5        	PUSH	D	;SAVE NEXT SECTOR TO READ
 7AE1 E5        	PUSH	H	;SAVE DMA ADDRESS
 7AE2 4A        	MOV	C,D	;GET SECTOR ADDRESS TO REGISTER C
 7AE3 CD587C    	CALL	SETSEC	;SET SECTOR ADDRESS FROM REGISTER C
 7AE6 C1        	POP	B	;RECALL DMA ADDRESS TO B,C
 7AE7 C5        	PUSH	B	;REPLACE ON STACK FOR LATER RECALL
 7AE8 CD637C    	CALL	SETDMA	;SET DMA ADDRESS FROM B,C
                ;
                ;	DRIVE SET TO 0, TRACK SET, SECTOR SET, DMA ADDRESS SET
 7AEB CD697C    	CALL	READ
 7AEE FE00      	CPI	00H	;ANY ERRORS?
 7AF0 C2CB7A    	JNZ	WBOOT	;RETRY THE ENTIRE BOOT IF AN ERROR OCCURS
                ;
                ;	NO ERROR, MOVE TO NEXT SECTOR
 7AF3 E1        	POP	H	;RECALL DMA ADDRESS
 7AF4 118000    	LXI	D,128	;DMA=DMA+128
 7AF7 19        	DAD	D	;NEW DMA ADDRESS IS IN H,L
 7AF8 D1        	POP	D	;RECALL SECTOR ADDRESS
 7AF9 C1        	POP	B	;RECALL NUMBER OF SECTORS REMAINING, AND CURRENT TRK
 7AFA 05        	DCR	B	;SECTORS=SECTORS-1
 7AFB CA147B    	JZ	GOCPM	;TRANSFER TO CP/M IF ALL HAVE BEEN LOADED
                ;
                ;	MORE SECTORS REMAIN TO LOAD, CHECK FOR TRACK CHANGE
 7AFE 14        	INR	D
 7AFF 7A        	MOV	A,D	;SECTOR=26?, IF SO, CHANGE TRACKS
 7B00 FE10      	CPI	16
 7B02 DADF7A    	JC	LOAD1	;CARRY GENERATED IF SECTOR<27
                ;
                ;	END OF CURRENT TRACK, GO TO NEXT TRACK
 7B05 1600      	MVI	D,0	;BEGIN WITH FIRST SECTOR OF NEXT TRACK
 7B07 0C        	INR	C	;TRACK=TRACK+1
                ;
                ;	SAVE REGISTER STATE, AND CHANGE TRACKS
 7B08 C5        	PUSH	B
 7B09 D5        	PUSH	D
 7B0A E5        	PUSH	H
 7B0B CD507C    	CALL	SETTRK	;TRACK ADDRESS SET FROM REGISTER C
 7B0E E1        	POP	H
 7B0F D1        	POP	D
 7B10 C1        	POP	B
 7B11 C3DF7A    	JMP	LOAD1	;FOR ANOTHER SECTOR
                ;
                ;	END OF LOAD OPERATION, SET PARAMETERS AND GO TO CP/M
                GOCPM:
 7B14 3EC3      	MVI	A,0C3H	;C3 IS A JMP INSTRUCTION
 7B16 320000    	STA	0	;FOR JMP TO WBOOT
 7B19 21037A    	LXI	H,WBOOTE	;WBOOT ENTRY POINT
 7B1C 220100    	SHLD	1	;SET ADDRESS FIELD FOR JMP AT 0
                ;
 7B1F 320500    	STA	5	;FOR JMP TO BDOS
 7B22 21066C    	LXI	H,BDOS	;BDOS ENTRY POINT
 7B25 220600    	SHLD	6	;ADDRESS FIELD OF JUMP AT 5 TO BDOS
                ;
 7B28 018000    	LXI	B,80H	;DEFAULT DMA ADDRESS IS 80H
 7B2B CD637C    	CALL	SETDMA
                
 7B2E 322000    	STA	20H	;JUMP FOR KEYBAORD INTERRUPT HANDLER
 7B31 21EB7D    	LXI	H,KBIRQ
 7B34 222100    	SHLD	21H	;KB HANDLER ADDRESS
                ;
 7B37 FB        	EI		;ENABLE THE INTERRUPT SYSTEM
 7B38 3A0400    	LDA	CDISK	;GET CURRENT DISK NUMBER
 7B3B 4F        	MOV	C,A	;SEND TO THE CCP
 7B3C C30064    	JMP	CCP	;GO TO CP/M FOR FURTHER PROCESSING
                ;
                ;
                ;	SIMPLE I/O HANDLERS (MUST BE FILLED IN BY USER)
                ;	IN EACH CASE, THE ENTRY POINT IS PROVIDED, WITH SPACE RESERVED
                ;	TO INSERT YOUR OWN CODE
                ;
                CONST:	;CONSOLE STATUS, RETURN 0FFH IF CHARACTER READY, 00H IF NOT
 7B3F CD347E    	CALL	KBEMPTY
 7B42 3E00      	MVI	A,00H
 7B44 CA497B    	JZ	NOCHAR
 7B47 3EFF      	MVI	A,0FFH
                NOCHAR:	
 7B49 C9        	RET
                ;
                CONIN:	;CONSOLE CHARACTER INTO REGISTER A
 7B4A CD417E    	CALL	KBGET
 7B4D 4F        	MOV	C,A
 7B4E 17        	RAL
 7B4F 79        	MOV	A,C
 7B50 DA557B    	JC	NOTCONTROL
                	;CONTROL + KEY
 7B53 E61F      	ANI	1FH	;MAKE ASCII VALUE FOR CONTROL+KEY
                NOTCONTROL:
 7B55 FE85      	CPI	85H	;DELETE KEY	
 7B57 C25C7B    	JNZ	NOTDEL
 7B5A 3E7F      	MVI	A,7FH
                
                NOTDEL:	
 7B5C E67F      	ANI	7FH	;STRIP PARITY BIT
 7B5E C9        	RET
                ;
                CONOUT: ;CONSOLE CHARACTER OUTPUT FROM REGISTER C
 7B5F 3A177F    	LDA	SCRX	;X POSITION
 7B62 6F        	MOV	L,A
 7B63 3C        	INR	A	;NEXT X POSITION	
 7B64 32177F    	STA	SCRX
 7B67 3A187F    	LDA	SCRY
 7B6A F680      	ORI	80H
 7B6C 67        	MOV	H, A	;HL CONTAINS VIDMEM ADDRESS FOR CURRENT POSITION
                	;GET RID OF CURSOR AT CURRENT POSITION
 7B6D 3620      	MVI	M,32
 7B6F 79        	MOV	A,C	;GET CHAR TO OUTPUT TO ACCUMULATOR
 7B70 FE0D      	CPI	CR	;CARRIAGE RETURN?
 7B72 CA837B    	JZ      CARRET
 7B75 FE0A      	CPI	LF	;LINE FEED?
 7B77 CAA97B    	JZ	LINF
 7B7A FE08      	CPI	BS	;BACKSPACE?
 7B7C CA8A7B    	JZ	BACKSP
 7B7F 77        	MOV	M,A	;OUTPUT CHARACTER
 7B80 C3B07B    	JMP	CHKXY
                CARRET:
 7B83 AF        	XRA	A	;CLEAR ACCUMULATOR
 7B84 32177F    	STA	SCRX
 7B87 C3B07B    	JMP	CHKXY
                BACKSP
 7B8A 3A177F    	LDA	SCRX	;ALREADY INCREMENTED X POSITION
 7B8D 3D        	DCR	A	;UNDO X INCREMENT
 7B8E CA987B    	JZ	PREVLIN	;AT START OF LINE
 7B91 3D        	DCR	A	;1 CHARACTER BACK
 7B92 32177F    	STA	SCRX
 7B95 C3B07B    	JMP	CHKXY	
                
                PREVLIN:
 7B98 32177F    	STA	SCRX
 7B9B 3A187F    	LDA	SCRY
 7B9E B7        	ORA	A
 7B9F CAB07B    	JZ	CHKXY	;ALREADY AT LINE 0, NOTHING LEFT TO DO
 7BA2 3D        	DCR	A
 7BA3 32187F    	STA	SCRY
 7BA6 C3B07B    	JMP	CHKXY
                LINF:
 7BA9 3A187F    	LDA	SCRY
 7BAC 3C        	INR	A
 7BAD 32187F    	STA     SCRY
                
                	
                
                CHKXY:
                	;DID WE RUN OFF THE END OF THE LINE?
 7BB0 3A177F    	LDA	SCRX
 7BB3 FE50      	CPI	80
 7BB5 DAC37B    	JC	CHKY
 7BB8 AF        	XRA	A	;CLEAR ACCUMULATOR
 7BB9 32177F    	STA	SCRX	;BACK TO X=0
 7BBC 3A187F    	LDA	SCRY
 7BBF 3C        	INR	A
 7BC0 32187F    	STA	SCRY	;AND NEXT LINE
                CHKY:	
 7BC3 3A187F    	LDA	SCRY
 7BC6 FE1A      	CPI	26
 7BC8 DAF27B    	JC	DRWCUR
                
                	;NEED TO SCROLL UP
 7BCB 0E19      	MVI	C,25	;25 LINES TO COPY
 7BCD 1680      	MVI	D, 80H	;DESTINATION INITIALLY LINE 0
 7BCF 2681      	MVI	H, 81H	;SOURCE INITIALLY LINE 1
                DOSCROLL:	
 7BD1 1E00      	MVI	E,0	;RESET LOW POINTER TO 0
 7BD3 2E00      	MVI	L,0
 7BD5 0650      	MVI	B, 80		;80 CHARACTERS
 7BD7 CDCC7D    	CALL	CPYMEM
 7BDA 14        	INR	D		;NEXT DST LINE
 7BDB 24        	INR	H		;NEXT SRC LINE
 7BDC 0D        	DCR	C
 7BDD C2D17B    	JNZ	DOSCROLL
                
                	;CLEAR BOTTOM LINE
 7BE0 210099    	LXI	H, 9900H	;VIDMEM ADDRESS LAST LINE
 7BE3 0E20      	MVI	C, 20H
 7BE5 0650      	MVI	B, 80		;80 CHARACTERS
 7BE7 3E19      	MVI	A,25
 7BE9 32187F    	STA	SCRY
                
                CLRLIN:	
 7BEC 71        	MOV     M, C
 7BED 23        	INX     H
 7BEE 05        	DCR	B
 7BEF C2EC7B    	JNZ     CLRLIN
                
 7BF2 3E0F      DRWCUR: MVI	A, FLHALFT OR FLON
 7BF4 D304      	OUT	PFLAGS
 7BF6 3A177F    	LDA	SCRX	;X POSITION
 7BF9 6F        	MOV	L,A
 7BFA 3A187F    	LDA	SCRY
 7BFD F680      	ORI	80H
 7BFF 67        	MOV	H, A
 7C00 3620      	MVI	M,32
 7C02 3E07      	MVI	A, FLHALFT OR FLOFF
 7C04 D304      	OUT	PFLAGS
 7C06 C9        	RET
                
                ;
                LIST:	;LIST CHARACTER FROM REGISTER C
 7C07 79        	MOV	A,C	;CHARACTER TO REGISTER A
 7C08 C9        	RET		;NULL SUBROUTINE
                ;
                LISTST:	;RETURN LIST STATUS (0 IF NOT READY, 1 IF READY)
 7C09 AF        	XRA	A	;0 IS ALWAYS OK TO RETURN
 7C0A C9        	RET
                ;
                PUNCH:	;PUNCH CHARACTER FROM REGISTER C
 7C0B 79        	MOV	A,C	;CHARACTER TO REGISTER A
 7C0C C9        	RET		;NULL SUBROUTINE
                ;
                ;
                READER: ;READ CHARACTER INTO REGISTER A FROM READER DEVICE
 7C0D 3E1A      	MVI	A,1AH	;ENTER END OF FILE FOR NOW (REPLACE LATER)
 7C0F E67F      	ANI	7FH	;REMEMBER TO STRIP PARITY BIT
 7C11 C9        	RET
                ;
                ;
                ;	I/O DRIVERS FOR THE DISK FOLLOW
                ;	FOR NOW, WE WILL SIMPLY STORE THE PARAMETERS AWAY FOR USE
                ;	IN THE READ AND WRITE SUBROUTINES
                ;
                HOME:	;MOVE TO THE TRACK 00 POSITION OF CURRENT DRIVE
                
 7C12 CD5B7D    	CALL	SEEKZERO
 7C15 C9        	RET		
                ;
                SELDSK:	;SELECT DISK GIVEN BY REGISTER C
 7C16 210000    	LXI	H,0000H	;ERROR RETURN CODE
 7C19 79        	MOV	A,C
 7C1A 32687E    	STA	DISKNO
 7C1D FE02      	CPI	2	;MUST BE BETWEEN 0 AND 1
 7C1F D0        	RNC		;NO CARRY IF 2,3,...
                ;	DISK NUMBER IS IN THE PROPER RANGE
 7C20 FE00      	CPI	0	;DISK 1?
 7C22 3E05      	MVI	A, MTR1 OR HEAD1 ;DISK 1
 7C24 0E01      	MVI	C, RDY1
 7C26 CA2D7C    	JZ 	DOSEL
 7C29 3E8A      	MVI	A, MTR2 OR HEAD2 OR SEL2 ; DISK2
 7C2B 0E02      	MVI	C, RDY2
                DOSEL:	
 7C2D 326B7E    	STA	CMDREG
 7C30 D316      	OUT	PCMD
 7C32 0607      	MVI	B,7
                WTRDY:	
 7C34 05        	DCR	B
 7C35 C8        	RZ 	;RETURN ERROR IF TIMED OUT
 7C36 3E07      	MVI	A,7
 7C38 CD4E7D    	CALL	DELAY
 7C3B DB05      	IN	PSTAT
 7C3D A1        	ANA	C
 7C3E CA347C    	JZ	WTRDY
                
                
                ;	COMPUTE PROPER DISK PARAMETER HEADER ADDRESS
 7C41 3A687E    	LDA	DISKNO
 7C44 6F        	MOV	L,A	;L=DISK NUMBER 0,1,2,3
 7C45 2600      	MVI	H,0	;HIGH ORDER ZERO
 7C47 29        	DAD	H	;*2
 7C48 29        	DAD	H	;*4
 7C49 29        	DAD	H	;*8
 7C4A 29        	DAD	H	;*16 (SIZE OF EACH HEADER)
 7C4B 11337A    	LXI	D,DPBASE
 7C4E 19        	DAD	D	;HL=.DPBASE(DISKNO*16)
 7C4F C9        	RET
                ;
                SETTRK:	;SET TRACK GIVEN BY REGISTER C
 7C50 79        	MOV	A,C
 7C51 32627E    	STA	TRACK
 7C54 CD857D    	CALL	SEEK
 7C57 C9        	RET
                ;
                SETSEC:	;SET SECTOR GIVEN BY REGISTER C
 7C58 79        	MOV	A,C
 7C59 32647E    	STA	SECTOR
 7C5C C9        	RET
                ;
                SECTRAN:
                	;TRANSLATE THE SECTOR GIVEN BY BC USING THE
                	;TRANSLATE TABLE GIVEN BY DE
 7C5D EB        	XCHG		;HL=.TRANS
 7C5E 09        	DAD	B	;HL=.TRANS(SECTOR)
 7C5F 6E        	MOV	L,M	;L = TRANS(SECTOR)
 7C60 2600      	MVI	H,0	;HL= TRANS(SECTOR)
 7C62 C9        	RET		;WITH VALUE IN HL
                ;
                SETDMA:	;SET DMA ADDRESS GIVEN BY REGISTERS B AND C
 7C63 69        	MOV	L,C	;LOW ORDER ADDRESS
 7C64 60        	MOV	H,B	;HIGH ORDER ADDRESS
 7C65 22667E    	SHLD	DMAAD	;SAVE THE ADDRESS
 7C68 C9        	RET
                ;
                READ:	;PERFORM READ OPERATION 
 7C69 3A647E    	LDA	SECTOR
 7C6C D315      	OUT	PSEC		;SECTOR NUMBER
 7C6E 3EDB      	MVI	A, SYNRD
 7C70 D311      	OUT	PSYNRD		; SYNC BYTE
 7C72 3E42      	MVI	A, 042H ;DMA_MODESET_EN_CH1|DMA_MODESET_TCSTOP
 7C74 D328      	OUT	PRMST		;DMA CONTROLLER MODE
 7C76 3E9B      	MVI	A, SSIZ		
 7C78 D323      	OUT	PRDCNT		;NUMBER OF BYTES
 7C7A 3E40      	MVI	A, 040H		
 7C7C D323      	OUT	PRDCNT		; DMA TO RAM
 7C7E 216C7E    	LXI	H, SECBUF	;READ TO TEMPORARY BUFFER
 7C81 7D        	MOV	A,L
 7C82 D322      	OUT	PRDADD
 7C84 7C        	MOV	A,H
 7C85 D322      	OUT	PRDADD
 7C87 3A6B7E    	LDA	CMDREG
 7C8A F610      	ORI	ACTEN
 7C8C E6BF      	ANI 	NOT WRTDSK
 7C8E 326B7E    	STA	CMDREG
 7C91 D316      	OUT	PCMD
 7C93 D317      	OUT	PACTIVE
                	
 7C95 DB05      RDWT:	IN	PSTAT
 7C97 17        	RAL
 7C98 DA957C    	JC	RDWT
                
                	;SYNC AND HEADER
 7C9B 23        	INX	H	;NOW AT TRACK#
 7C9C 1602      	MVI	D,2
 7C9E CDC37D    	CALL 	CSCHK
 7CA1 CAA77C    	JZ      HEADOK
 7CA4 3E01      	MVI	A,1	;OOPS
 7CA6 C9        	RET
                HEADOK:	
                	;HL NOW AT CHECKSUM BYTE
 7CA7 23        	INX	H	;NOW AT DATA
                	
 7CA8 E5        	PUSH	H 		;START ADDRESS FOR CHECKSUM
 7CA9 1696      	MVI	D, PLSIZ
 7CAB CDC37D    	CALL    CSCHK
 7CAE E1        	POP	H		;RESTORE DST ADDRESS
 7CAF CAB57C    	JZ	DATAOK
 7CB2 3E01      	MVI	A,1	;OOPS
 7CB4 C9        	RET
                DATAOK:	
 7CB5 EB        	XCHG
 7CB6 2A667E    	LHLD	DMAAD
 7CB9 EB        	XCHG
                	;WE LEAVE 18 ZERO BYTES AT START OF PAYLOAD
                	;FOR CONSISTENCY, THIS GIVES A CORRECT EXTRA HEADER IN SECTORS 0 AND 8
                	;WITHOUT TREATING THEM SPECIALLY
 7CBA 011200    	LXI	B, 18		
 7CBD 09        	DAD	B
                
 7CBE 0680      	MVI	B,CPMSSIZ
 7CC0 CDCC7D    	CALL	CPYMEM
 7CC3 3E00      	MVI	A,0
 7CC5 C9        	RET
                
                ;
                WRITE:	;PERFORM A WRITE OPERATION
                
 7CC6 3A6B7E    	LDA     CMDREG	;FIGURE OUT WHICH DRIVE IS CURRENT
 7CC9 E680      	ANI	SEL2	
 7CCB 0604      	MVI	B,WRP1
 7CCD CAD27C    	JZ	CHKWRPR	;JUMP IF DRIVE 1 CURRENT
 7CD0 0608      	MVI	B,WRP2  ;DRIVE 2 CURRENT
                	
                CHKWRPR:	
 7CD2 DB05      	IN	PSTAT
 7CD4 A0        	ANA	B
 7CD5 CADB7C    	JZ	WROK
 7CD8 3E01      	MVI	A,1	;CURRENT DISK IS WRITE PROTECTED
 7CDA C9        	RET
                
                WROK:
 7CDB 3A647E    	LDA	SECTOR
 7CDE 4F        	MOV	C,A
 7CDF D315      	OUT	PSEC		;SECTOR NUMBER
 7CE1 3E00      	MVI	A, SYNWR
 7CE3 D310      	OUT	PSYNWR		; SYNC BYTE
 7CE5 3E41      	MVI	A, 041H ;DMA_MODESET_EN_CH0|DMA_MODESET_TCSTOP
 7CE7 D328      	OUT	PRMST		;DMA CONTROLLER MODE
 7CE9 3EAB      	MVI	A, SSIZ	+ WRPRE	
 7CEB D321      	OUT	PWRCNT		;NUMBER OF BYTES
 7CED 3E80      	MVI	A, 080H		
 7CEF D321      	OUT	PWRCNT		; DMA FROM RAM
 7CF1 216C7E    	LXI	H, SECBUF	;WRITE FROM TEMPORARY BUFFER
 7CF4 7D        	MOV	A,L
 7CF5 D320      	OUT	PWRADD
 7CF7 7C        	MOV	A,H
 7CF8 D320      	OUT	PWRADD
                
                	; BUILD TEMPORARY BUFFER
 7CFA 1610      	MVI	D, WRPRE	;ZERO 16 PRE BYTES
 7CFC CDD57D    	CALL	ZEROMEM		
 7CFF E5        	PUSH 	H		;HL POINTS TO FIRST BYTEA FTER SYNC, SAVE IT
 7D00 169B      	MVI	D, SSIZ		;ZERO BUFFER
 7D02 CDD57D    	CALL	ZEROMEM		
 7D05 E1        	POP	H 		;RESTORE HL PTR FIRST DATA BYTE
 7D06 3EDB      	MVI	A,SYNRD
 7D08 77        	MOV	M, A		;SYNC BYTE
 7D09 23        	INX	H
 7D0A B7        	ORA	A
                	
                	;CONVERT TO 103 "LOGICAL" TRACK 
 7D0B 3A627E    	LDA	TRACK
 7D0E 17        	RAL			;TIMES 2
 7D0F E5        	PUSH	H
 7D10 21527E    	LXI	H,SECTTAB	;LOOKUP TABLE FOR SECTOR #
 7D13 1600      	MVI	D, 0
 7D15 59        	MOV	E,C		;SECTOR
 7D16 19        	DAD	D
 7D17 86        	ADD	M		;ADD 1 TO LOGCAL TRACKNO IF SECTOR BELONGS TO TRACK +1 	
 7D18 E1        	POP	H
 7D19 77        	MOV	M, A		;TRACK
                	
                	
 7D1A 23        	INX	H
 7D1B 71        	MOV	M, C		;SECTOR
 7D1C 2B        	DCX	H		;POINT TO TRACK AGAIN
 7D1D 1602      	MVI	D,2
 7D1F CDC37D    	CALL 	CSCHK
 7D22 77        	MOV	M, A		;CHECKSUM
 7D23 23        	INX	H
                	
                	;WE LEAVE 18 ZERO BYTES AT START OF PAYLOAD
                	;FOR CONSISTENCY, THIS GIVES A CORRECT EXTRA HEADER IN SECTORS 0 AND 8
                	;WITHOUT TREATING THEM SPECIALLY
 7D24 E5        	PUSH	H		;START ADDRESS FOR PAYLOAD CHECKSUM CALCULATION
 7D25 011200    	LXI	B,18
 7D28 09        	DAD	B
 7D29 EB        	XCHG
 7D2A 2A667E    	LHLD	DMAAD		;SOURCE ADDRES, DE CONTAINS DESTINATION NOW
                	
 7D2D 0680      	MVI	B,CPMSSIZ
 7D2F CDCC7D    	CALL	CPYMEM
                
 7D32 E1        	POP	H 		;START ADDRESS FOR CHECKSUM
 7D33 1696      	MVI	D, PLSIZ
 7D35 CDC37D    	CALL    CSCHK
 7D38 77        	MOV	M, A		;CHECKSUM
                	
                
                	
 7D39 3A6B7E    	LDA	CMDREG
 7D3C F650      	ORI	ACTEN OR WRTDSK
 7D3E 326B7E    	STA	CMDREG
 7D41 D316      	OUT	PCMD
 7D43 D317      	OUT	PACTIVE
                	
 7D45 DB05      WRTWT:	IN	PSTAT
 7D47 17        	RAL
 7D48 DA457D    	JC	WRTWT
                
 7D4B 3E00      	MVI	A,0
 7D4D C9        	RET		
                
                
                	;DELAY ROUTINE
                DELAY:
                
 7D4E 1ECF      	MVI     E, 0CFH
                INNER:                        
 7D50 EB        	XCHG
 7D51 EB        	XCHG
 7D52 1D        	DCR     E
 7D53 C2507D    	JNZ     INNER
 7D56 3D        	DCR     A
 7D57 C24E7D    	JNZ     DELAY
 7D5A C9        	RET
                
                	; SEEK CURRENT DISK TO TRACK 0
                SEEKZERO:
 7D5B 3A6B7E    	LDA     CMDREG
 7D5E E6DF      	ANI     NOT DIRUP
 7D60 D316      	OUT     PCMD
 7D62 326B7E    	STA     CMDREG
                WAITZERO:                     
 7D65 DB05      	IN      PSTAT
 7D67 E610      	ANI     TRK0
 7D69 C2767D    	JNZ	ATZERO         
 7D6C D314      	OUT     PSTEP
 7D6E 3E07      	MVI     A, 007H
 7D70 CD4E7D    	CALL    DELAY
 7D73 C3657D    	JMP     WAITZERO
                ATZERO:
 7D76 3A6B7E    	LDA     CMDREG	;FIGURE OUT WHICH DRIVE IS CURRENT
 7D79 E680      	ANI	SEL2	;AND SET CURRENT TRACK TO 0
 7D7B 21697E    	LXI	H, CURTRD1	;DRIVE 1 CURRENT, POINT HL TO CUR TRACK DISK 1
 7D7E CA827D    	JZ	ZER0	;IS DRIVE 1 CURRENT?
 7D81 23        	INX	H	;HL NOW POINTS TO CUR TRACK DISK 2
                ZER0:
 7D82 3600      	MVI	M,0
 7D84 C9        	RET
                ;	JNZ	ZERODISK2
                ;	STA	CURTRD1
                ;	RET
                ;ZERODISK2:	
                ;	STA	CURTRD2
                ;	RET
                
                	; SEEK CURRENT DISK TO TRACK IN "TRACK"
                SEEK:
 7D85 3A6B7E    	LDA     CMDREG	;FIGURE OUT WHICH DRIVE IS CURRENT
 7D88 E680      	ANI	SEL2	
 7D8A 21697E    	LXI	H, CURTRD1	;DRIVE 1 CURRENT, POINT HL TO CUR TRACK DISK 1
 7D8D CA937D    	JZ	DOSEEK
 7D90 216A7E    	LXI	H, CURTRD2		;DRIVE 2 CURRENT, POINT HL TO CUR TRACK DISK 2
                
                DOSEEK:	
 7D93 0E32      	MVI     C, 50		;DON'T TRY MORE THAN 50 STEPS
                	
                NEXTTRACK:
 7D95 46        	MOV	B,M		;TRACK WE ARE CURRENTLY AT
 7D96 3A627E    	LDA	TRACK		; TRACKNO WANTED
 7D99 FE23      	CPI     35             ; TRACK BELOW 35?
 7D9B D0        	RNC     
 7D9C 90        	SUB     B
 7D9D C8        	RZ                      ; RETURN IF AT WANTED TRACK
 7D9E 3A6B7E    	LDA     CMDREG
 7DA1 DAAA7D    	JC      STEPDOWN        ; CURRENT TRACK TOO HIGH
 7DA4 F620      	ORI     DIRUP 		; SET BIT 5 -> TRACK UP
 7DA6 34        	INR     M               ; INCREMENT CURRENT TRACK
 7DA7 C3AD7D    	JMP     DOSTEP
                
                STEPDOWN:                             
 7DAA E6DF      	ANI     NOT DIRUP 	;CLEAR BIT 5 -> TRACK DOWN
 7DAC 35        	DCR     M               ; DECREMENT CURRENT TRACK
                DOSTEP:     
 7DAD D316      	OUT     PCMD
 7DAF 326B7E    	STA     CMDREG
 7DB2 D314      	OUT     PSTEP
 7DB4 3E07      	MVI     A,7
 7DB6 CD4E7D    	CALL    DELAY
 7DB9 0D        	DCR     C
 7DBA C2957D    	JNZ     NEXTTRACK
                	;SOMETHING WRONG, SEEK TO TRACK ZERO AND TRY AGAIN
 7DBD CD5B7D    	CALL    SEEKZERO
 7DC0 C3857D    	JMP     SEEK
                
                ;CALCULATE AND CHECK CHECKSUM
                ;DATA IN HL, SIZE IN D
                ;RETURNS WITH CALCULATED CHECKSUM IN A
                ;HL POINTER CHECKSUM BYTE
                ;ZERO FLAG SET IF CHECKSUM OK
                CSCHK:
 7DC3 97        	SUB     A
                CSLOOP: 
 7DC4 86        	ADD     M               ; ADD TO CHECKSUM
 7DC5 23        	INX     H               ; INCREMENT PTR
 7DC6 15        	DCR     D               ; DECREMENT COUNT
 7DC7 C2C47D    	JNZ     CSLOOP         ; ADD VALUE AT PTR HL TO A
 7DCA BE        	CMP     M               ; COMPARE SUM IN A WITH BYTE AT PTR
 7DCB C9        	RET
                
                	;COPY MEMORY FROM HL TO DE FOR B BYTES
                CPYMEM:
 7DCC 7E        	MOV     A, M            ; LOAD FROM MEM HL
 7DCD 12        	STAX    D               ; STORE AT DE
 7DCE 23        	INX     H
 7DCF 13        	INX     D               ; INCREMENT POINTERS
 7DD0 05        	DCR     B               ; DECREMENT COUNT
 7DD1 C2CC7D    	JNZ     CPYMEM        ; LOAD FROM MEM HL
 7DD4 C9        	RET
                
                	;ZERO MEMORY AT HL, FOR D BYTES
                	;CLOBBERS DE
                ZEROMEM:
 7DD5 1E00      	MVI     E, 0
                ZERLOOP:
 7DD7 73        	MOV     M, E
 7DD8 23        	INX     H
 7DD9 15        	DCR     D
 7DDA C2D77D    	JNZ     ZERLOOP
 7DDD C9        	RET
                
                
                ;PRINT MESSAGE AT H,L TO 0
                PRMSG:	
 7DDE 7E        	MOV	A,M
 7DDF B7        	ORA	A	;ZERO?
 7DE0 C8        	RZ
                ;	MORE TO PRINT
 7DE1 E5        	PUSH	H
 7DE2 4F        	MOV	C,A
 7DE3 CD5F7B    	CALL	CONOUT
 7DE6 E1        	POP	H
 7DE7 23        	INX	H
 7DE8 C3DE7D    	JMP	PRMSG
                
                	;KEYBOARD INTERRUPT HANDLER
                KBIRQ:
 7DEB F5        	PUSH	PSW
 7DEC 22257F    	SHLD	HLTMP		;SAVE HL
 7DEF 210000    	LXI	H, 0
 7DF2 39        	DAD	SP		;SP TO HL
 7DF3 312F7F    	LXI	SP,INTSTK+INSTSTKSIZ	;SWITCH TO OUR OWN STACK
 7DF6 E5        	PUSH	H		;OLD SP
 7DF7 C5        	PUSH	B
 7DF8 D5        	PUSH	D
                
 7DF9 DB06      	IN	PKEYB		;READ CHARACTER, CLEAR INTERRUPT
 7DFB 47        	MOV	B,A
 7DFC CD1A7E    	CALL	KBSTOR
 7DFF 3E05      	MVI	A, IRQSTVAL
 7E01 D300      	OUT	PRIRQPR		;ACK TO INTERRUPT CONTROLLER
                	
 7E03 D1        	POP	D
 7E04 C1        	POP	B
 7E05 E1        	POP 	H		;OLD SP
 7E06 F9        	SPHL			;RESTORE SP
 7E07 2A257F    	LHLD	HLTMP
 7E0A F1        	POP	PSW
 7E0B FB        	EI
 7E0C C9        	RET		
                
                	;RESET KEYBOARD CIRCULAR BUFFER
                KBBUFRES:	
 7E0D F3        	DI
 7E0E 21197F    	LXI	H, KBBUF
 7E11 22237F    	SHLD	KBRDPTR
 7E14 23        	INX	H
 7E15 22217F    	SHLD	KBWRPTR
 7E18 FB        	EI
 7E19 C9        	RET
                
                	;STORE CHARACTER IN B IN KEYBOARD BUFFER
                KBSTOR:
 7E1A 2A217F    	LHLD    KBWRPTR		;CURRENT WRITE POINTER VALUE
 7E1D 3A237F    	LDA	KBRDPTR		;CURRENT READ POINTER VALUE LOW BYTE
 7E20 BD        	CMP     L		;SAME? THEN BUFFER IS FULL
 7E21 C8        	RZ                      ;RETURN IF FULL
 7E22 70        	MOV     M, B		;STORE CHARACTER
 7E23 CD2A7E    	CALL    KBBUFINC
 7E26 22217F    	SHLD    KBWRPTR
 7E29 C9        	RET
                
                	;INCREMENT CIRCULAR BUFFER POINTER IN HL
                KBBUFINC:
 7E2A 23        	INX	H
 7E2B 3A1B7E    	LDA	KBSTOR+1	;GET LOW BYTE OF FIRST ADDRESS AFTER KEYBOARD BUFFER
                			      	;DIRTY TRICK TO GET IT FROM THE OPERAND IN KBSTOR FIRST INS
 7E2E BD        	CMP	L		;IF EQUAL, NEED TO WRAP BUFFER AROUND
 7E2F C0        	RNZ			;OTHERWISE RETURN
 7E30 21197F    	LXI	H, KBBUF
 7E33 C9        	RET
                
                	;RETURN WITH ZERO FLAG SET IF KEYBOARD BUFFER EMPTY
                KBEMPTY:
                	
 7E34 2A237F    	LHLD	KBRDPTR
 7E37 CD2A7E    	CALL	KBBUFINC	;IF READPTR 1 BELOW WRITEPTR
                				;THERE ARE NO CHARS WAITING
 7E3A F3        	DI
 7E3B 3A217F    	LDA	KBWRPTR		;GET LOW BYTE OF WRITE POINTER
 7E3E FB        	EI
 7E3F BD        	CMP	L
 7E40 C9        	RET
                
                	;GET CHARACTER FROM KEYBOARD BUFFER IF PRESENT
                KBGET:
 7E41 CD347E    	CALL	KBEMPTY
 7E44 CA417E    	JZ	KBGET
 7E47 2A237F    	LHLD	KBRDPTR
 7E4A CD2A7E    	CALL	KBBUFINC
 7E4D 7E        	MOV	A,M
 7E4E 22237F    	SHLD	KBRDPTR	
 7E51 C9        	RET
                
                ;MAP PHYSICAL SECTOR NUMBER TO 103 LOGICAL TRACK +1 OR NOT
 7E52 0001000001SECTTAB:	DB 0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0
                
                
                ;
                ;	THE REMAINDER OF THE CBIOS IS RESERVED UNINITIALIZED
                ;	DATA AREA, AND DOES NOT NEED TO BE A PART OF THE
                ;	SYSTEM MEMORY IMAGE (THE SPACE MUST BE AVAILABLE,
                ;	HOWEVER, BETWEEN "BEGDAT" AND "ENDDAT").
                ;
                
                
 7E62           TRACK:	DS	2	;TWO BYTES FOR EXPANSION
 7E64           SECTOR:	DS	2	;TWO BYTES FOR EXPANSION
 7E66           DMAAD:	DS	2	;DIRECT MEMORY ADDRESS
 7E68           DISKNO:	DS	1	;DISK NUMBER 0-15
                
                ;NEXT TWO MUST BE KEPT TOGETHER
 7E69           CURTRD1: DS	1	;CURRENT TRACK DISK 1
 7E6A           CURTRD2: DS	1	;CURRENT TRACK DISK 2
                
 7E6B           CMDREG:	DS	1
 7E6C           SECBUF:	DS	SSIZ + WRPRE
 7F17           SCRX:	DS	1
 7F18           SCRY:	DS	1
                
                ;KEYBOARD BUFFER MUST NOT CROSS PAGE BOUNDARY!!
 7F19           KBBUF	DS	KBBUFSIZ	;KEYBOARD CIRCULAR BUFFER
                ;KBWRPTR MUST BE IMMEDIATELY AFTER KBBUF!
 7F21           KBWRPTR	DS	2		;BUFFER WRITE POINTER
 7F23           KBRDPTR	DS	2		;BUFFER READ POINTER
                
 7F25           HLTMP	DS	2
 7F27           INTSTK	DS	INSTSTKSIZ		;INTERRUPT STACK
                
                ;
                ;	DEFINE RAM AREAS FOR BDOS OPERATION
                	ENDEF
 7F2F+=         BEGDAT	EQU	$
 7F2F+          DIRBUF:	DS	128	;DIRECTORY ACCESS BUFFER
 7FAF+          ALV0:	DS	8
 7FB7+          CSV0:	DS	16
 7FC7+          ALV1:	DS	8
 7FCF+          CSV1:	DS	16
 7FDF+=         ENDDAT	EQU	$
 00B0+=         DATSIZ	EQU	$-BEGDAT
 7FDF           	END